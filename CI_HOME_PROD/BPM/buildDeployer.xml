<?xml version="1.0"?>
<!--
    Copyright Â© 2018 Software AG, Darmstadt, Germany and/or its licensors
    SPDX-License-Identifier: Apache-2.0
    Licensed under the Apache License, Version 2.0 (the "License");
    You may not use this file except in compliance with the License.
    You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.                                                            
 -->

<project name="Deploy" default="deployWM" basedir=".">
	<property name="projectNameFull" value="${projectName}_${buildNumber}"/>

	<!-- Global Variables that concern the code and should be changed only if the code is changed -->
	<!-- Template for the Deployer Project Specification -->
	<property name="deployerProjectDefinitionTemplate" value="resources/ProjectSpecificationTemplate.xml"/>
	
	<!-- Target filename of the Deployer Project Specification for this run -->
	<property name="deployerProjectDefinition" value="${workspace.dir}/ProjectAutomator/${projectNameFull}DeploymentSpec.xml"/>
	
	<!-- XSLT for the Deployer Project Specification - adding Repository and Project Sections -->
	<property name="initialXSLT" value="resources/setUpInitial.xslt"/>
	
	<target name="deployWM" description="main deploy task" depends="startDeployment, initPAandDeployerWindows, initPAandDeployerUnix, createDeployerSpec,execProjectAutomator,triggerCheckpoint,triggerDeploy">
	</target>

	<target name="startDeployment">		
		<echo message="Start deploying ${projectNameFull}" />
	</target>

    <!-- determine which PA and Deployer executables are used - different for Windows and Unix -->
	<condition property="isWindows">
		<os family="windows" />
	</condition>

	<condition property="isUnix">
		<os family="unix" />
	</condition>

	<target name="initPAandDeployerWindows" if="isWindows">
		<property name="deployerExecutable" value="Deployer.bat" />
		<property name="deployerAutomatorExecutable" value="projectautomator.bat" />
	</target>

	<target name="initPAandDeployerUnix" if="isUnix">
		<property name="deployerExecutable" value="Deployer.sh" />
		<property name="deployerAutomatorExecutable" value="projectautomatorUnix.sh" />
	</target>
	<!-- determine which PA and Deployer executables are used - different for Windows and Unix -->
        
		
	<target name="createDeployerSpec" depends="cleanupDeployerSpec,setupDeployerSpec">		
	</target>
	
	<target name="cleanupDeployerSpec">
		<if>
			<available file="${deployerProjectDefinition}"/>
			<then>
				<delete file="${deployerProjectDefinition}"/>	
			</then>
		</if>	
	</target>
	
	<target name="setupDeployerSpec" description="Creates the project automator xml with XSLT based on the given variables.">				
		<xslt style="${initialXSLT}" in="${deployerProjectDefinitionTemplate}" out="${deployerProjectDefinition}">
			<!--build/deployer server props -->
			<param name="deployerHost" expression="${deployerHost}" />
			<param name="deployerPort" expression="${deployerPort}" />
			<param name="deployerUsername" expression="${deployerUsername}" />
			<param name="deployerPassword" expression="${deployerPassword}" />
			
			<!--target server props -->
			<param name="prodBPMHost1" expression="${prodBPMHost1}" />
			<param name="prodBPMPort1" expression="${prodBPMPort1}" />
			<param name="prodBPMUsername1" expression="${prodBPMUsername1}" />
			<param name="prodBPMPassword1" expression="${prodBPMPassword1}" />

			<param name="prodBPMHost2" expression="${prodBPMHost2}" />
			<param name="prodBPMPort2" expression="${prodBPMPort2}" />
			<param name="prodBPMUsername2" expression="${prodBPMUsername2}" />
			<param name="prodBPMPassword2" expression="${prodBPMPassword2}" />

			
			<!-- general props -->
			<param name="repoName" expression="${repositoryName}" />
			<param name="repoPath" expression="${buildOutputDir}" />
			<param name="projectName" expression="${projectNameFull}" />
			<param name="bpmPackagesToBuild" expression="${bpmPackagesToBuild}" />
			<param name="dateTime" expression="${dateTime}" />
			<param name="comment" expression="${comment}" />
		</xslt>				
	</target>
	
		
	<target name="execProjectAutomator">
		<path id="pathProjectdefinition">
			<pathelement location="${deployerProjectDefinition}" />
		</path>
		<pathconvert refid="pathProjectdefinition" property="pathProjectdefinitionFile"/>
		
				
		<exec dir="${deployerInstallationPath}"  executable="${deployerInstallationPath}/${deployerAutomatorExecutable}" failonerror="true" resultproperty="appState">		
			<arg value="${pathProjectdefinitionFile}" />
		</exec>
		
		<if>			
			<equals arg1="${appState}" arg2="0" trim="true"/>			
			<then>
				<echo message ="Project Automator successfully executed."/>
			</then>
			<else>			    				
				<fail message="Project Automator failed."/>
			</else>
		</if>		
	</target>


	<target name="triggerCheckpoint">
		<exec executable="${deployerInstallationPath}/${deployerExecutable}" dir="${deployerInstallationPath}" failonerror="true" resultproperty="appState">
			<arg value="--checkpoint"/>
			<arg line="-project ${projectNameFull}"/>
			<arg line="-dc myDeployment"/>
			<arg line="-host ${deployerHost}"/>
			<arg line="-port ${deployerPort}"/>
			<arg line="-user ${deployerUsername}"/>
			<arg line="-pwd ${deployerPassword}"/>
			<arg value="-force"/>
		</exec>
		
		<if>			
		<equals arg1="${appState}" arg2="0" trim="true"/>			
			<then>
				<echo message="WMDeployer checkpoint created."/>
			</then>
			<else>
				<echo message="WMDeployer checkpoint failed."/>			    				
				<fail message="WMDeployer checkpoint failed."/>
			</else>
		</if>		
	</target>	

	<target name="triggerDeploy">
		<exec executable="${deployerInstallationPath}/${deployerExecutable}" dir="${deployerInstallationPath}" failonerror="false" resultproperty="deployState">
			<arg value="--deploy"/>
			<arg line="-project ${projectNameFull}"/>
			<arg line="-dc myDeployment"/>
			<arg line="-host ${deployerHost}"/>
			<arg line="-port ${deployerPort}"/>
			<arg line="-user ${deployerUsername}"/>
			<arg line="-pwd ${deployerPassword}"/>
		</exec>
		<echo message="deployState"/>

		<echo message="${deployState}"/>
		<if>			
		<equals arg1="${deployState}" arg2="0" trim="true"/>			
			<then>
				<echo message="WMDeployer successfully executed."/>	
			</then>
			<else>
				<exec executable="${deployerInstallationPath}/${deployerExecutable}" dir="${deployerInstallationPath}" failonerror="false" resultproperty="rollbackState">
					<arg value="--rollback"/>
					<arg line="-project ${projectNameFull}"/>
					<arg line="-dc myDeployment"/>
					<arg line="-host ${deployerHost}"/>
					<arg line="-port ${deployerPort}"/>
					<arg line="-user ${deployerUsername}"/>
					<arg line="-pwd ${deployerPassword}"/>
				</exec>	
				<if>			
				<equals arg1="${rollbackState}" arg2="0" trim="true"/>			
					<then>
					<echo message="WMDeployer successfully rolled back."/>
					</then>
				<else>	
					<echo message="WMDeployer deployment failed and rollback failed."/>		    			
					<fail message="WMDeployer deployment failed and rollback failed."/>
				</else>
				</if>
				<echo message="WMDeployer deployment failed."/>
				<fail message="WMDeployer deployment failed."/>
			</else>
		</if>		
	</target>	
</project>
